HW8     ----By Haojie Chen
------------------------------------------------------

I create a c.file to generate files with varying numbers of lines.
(100, 100000, 10000000)

Also, in order to sort according to ASCII values, I used:
export LC_ALL=C
in shell script srot13s.
-----------------------------------------------------
Using time command, and the results are the following:
100 lines:
$ time ./srot13 < w100.txt
real   0m0.024s
user   0m0.008s
sys    0m0.010s

$ time ./srot13u < w100.txt
Number of comparisons: 419
real   0m0.003s
user   0m0.001s
sys    0m0.000s

$ time ./srot13s < w100.txt
real   0m0.009s
user   0m0.000s
sys    0m0.006s


100,000 lines:
$ time ./srot13 < w100000.txt
real   0m0.324s
user   0m0.148s
sys    0m0.171s

$ time ./srot13u < w100000.txt
Number of comparisons: 1423515
real   0m0.335s
user   0m0.067s
sys    0m0.267s

$ time ./srot13s < w100000.txt
real   0m0.362s
user   0m0.218s
sys    0m0.140s


10,000,000 lines:
$ time ./srot13 < w10000000.txt
real   0m44.352s
user   0m20.325s
sys    0m16.580s

$ time ./srot13u < w10000000.txt
Number of comparisons: 208209155
real   0m51.414s
user   0m8.574s
sys    0m26.939s

$ time ./srot13s < w10000000.txt
real   0m44.721s
user   0m22.582s
sys    0m18.288s

Conclusion:
When the file size is relatively small, srot13, srot13u and srot13s takes about
the same time (the difference is negligible). When it gets to 10000000 lines,
It is obvious that srot13 takes the least time since it uses getchar() and 
putchar() from stdlib. Srot13u, which uses read() and write(), requires a lot
more system calls, which slows the process down because it can only read/write
one byte at a time. Srot13s uses tr2b, which also uses larger buffer and stdlib
, and it is faster than srot13u as well but almost the same speed as srot13.


--------------------------------------------------------------------
Numbers of comparison results:
100 lines: 419
100,000 lines: 1423515
10,000,000 lines: 208209155

Since the big O of qsort is Nlog2(N), and the numbers of input lines as N seems
matching the function result, the number of comparisons is approximately
Nlog2(N).
