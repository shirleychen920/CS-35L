Originally, locale doesn't generate the desired output, so I use:
export LC_ALL='C'

I create the file words by using:
sort /usr/share/dict/words > words

I get the text file containing HTML by using:
wget http://cs.ucla.edu/classes/spring15/cs35L/assign/assign2.html

Command description:
tr -c 'A-Za-z' '[\n*]' < assign2.html
tr translates, squeeze, delete characters from standard input, 
then write to standard output. tr -c replaces the complement of SET1, 
in this case is all the non-alphabetic characters with newline.

tr -cs 'A-Za-z' '[\n*]' < assign2.html
It deletes the repeats of non-alphabetic characters,
 and replaces the remained ones with newline.

tr -cs 'A-Za-z' '[\n*]' < assign2.html | sort
It takes the outputs of the last command and sorts them using ASCII.

tr -cs 'A-Za-z' '[\n*]' < assgin2.html | sort -u
It sorts like the last command but gets rid of all the duplicated 
words and only keeps one of each.

tr -cs 'A-Za-z' '[\n*]' < assign2.html | sort -u | comm - words
It takes the outputs of the last command as the first argument, 
comparing the worted assign2 file and words file line by line. 
The first column shows the lines unique to assign2 and the second
 column shows the lines unique to words, the third column shows 
the lines that both files contain.

tr -cs 'A-Za-z' '[\n*]' < assign2.html | sort -u | comm -23 - words
It supresses column 2 and cloumn 3 of the outputs of the last command,
 only keeps cloumn 1 which contains lines that are unique to assign2.\
html.


Shell script:
#!/usr/local/cs/bin/bash

#convert all the uppercase letters to lowercase
tr '[:upper:]' '[:lower:]' | \

#delete the content at the beginning and in the ed
sed '/<!doctype/,/adopt/d' | \

sed '/<\/table>/,/<\/html>/d' | \

#remove extra blocks like this
sed '/<td><br>/,/<td><\/td>/d' | \

#remove all the </tr>
sed 's/<\/tr>//g' | \

#remove all the English words
sed '/<tr>/,/\/td>/d' | \

#remove all the <u>
sed 's/<u>//g' | \

#remove all the </u>
sed 's/<\/u>//g' | \

#remove all the <td>
sed 's/<td>//g' | \

#remove all the </td>
sed 's/<\/td>//g' | \

#remove all the illegal words
sed '/^[a-z`]/d' | \

#seperate lines
sed 's/\ /\n/g' | \
sed 's/,/\n/g' | \

#delete extra space
tr -cs 'A-Za-z`' '[\n*]' | \

#delete the first blank line
sed 1d | \

#replace ` with '
sed 's/`/\x27/g' | \

#delete invalid characters
grep "^[pk'mnwlhaeiou]*$" | \

# sort the words
sort -u


In order to make buildwords executable, use:
chmod a+x buildwords

Get Hawaiian dictionary by using:./buildwords < hnwnsdeng.htm > hwords

Check the number of mispelled English words (found 40) by using:
tr -cs 'A-Za-z' '[\n*]' < assign2.html | tr '[:upper:]'\
 '[:lower:]' | sort -u | comm -23 - words | wc -l

Check the number of mispelled Hawaiian words (found 415) by using:
tr -cs "A-Za-z'" "[\n*]" < assign2.html | tr '[:upper:]'\
 '[:lower:]' | sort -u | comm -23 - hwords | wc -l

The words mispelled as English but not as Hawaiian have examples: lau, halau...

The words mispelled as Hawaiian but not as English have examples: hawaiian...